diff --git a/omni/accelerators/sched/global_proxy/modules/ngx_http_prefill_module/ngx_http_prefill_module.c b/omni/accelerators/sched/global_proxy/modules/ngx_http_prefill_module/ngx_http_prefill_module.c
index d487f0e..5860c09 100644
--- a/omni/accelerators/sched/global_proxy/modules/ngx_http_prefill_module/ngx_http_prefill_module.c
+++ b/omni/accelerators/sched/global_proxy/modules/ngx_http_prefill_module/ngx_http_prefill_module.c
@@ -590,19 +590,44 @@ static ngx_int_t ngx_http_gen_prefill_request_body(
         return NGX_ERROR;
     }
 
+    // Add kv_transfer_params to the JSON body
+    const char *kv_transfer_params = 
+        ",\"kv_transfer_params\":{"
+        "\"do_remote_decode\":true,"
+        "\"do_remote_prefill\":false,"
+        "\"remote_engine_id\":null,"
+        "\"remote_block_ids\":null,"
+        "\"remote_host\":null,"
+        "\"remote_port\":null"
+        "}";
+    size_t kv_len = ngx_strlen(kv_transfer_params);
+
+    char *final_json_str = ngx_palloc(r->pool, str_len + kv_len + 1);
+    if (final_json_str == NULL) {
+        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "prefill: failed to allocate memory for final JSON");
+        return NGX_ERROR;
+    }
+
+    ngx_memcpy(final_json_str, modified_json_str, str_len - 1); // Copy up to the closing '}'
+    ngx_memcpy(final_json_str + str_len - 1, kv_transfer_params, kv_len); // Append kv_transfer_params
+    final_json_str[str_len + kv_len - 1] = '}'; // Close the JSON object
+    final_json_str[str_len + kv_len] = '\0';
+
+    str_len += kv_len;
+
     ngx_log_debug2(NGX_LOG_DEBUG_HTTP,
         r->connection->log,
         0,
-        "prefill: modified body for subrequest: %d, %s",
+        "prefill: final modified body for subrequest: %d, %s",
         str_len,
-        modified_json_str);
+        final_json_str);
 
     b = ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
     if (b == NULL) {
         ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "prefill: failed to ngx_pcalloc buf");
         return NGX_ERROR;
     }
-    b->pos = (u_char *)modified_json_str;
+    b->pos = (u_char *)final_json_str;
     b->last = b->pos + str_len;
     b->memory = 1;
     b->last_buf = (sr->request_body_no_buffering) ? 0 : 1;
